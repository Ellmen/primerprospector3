#!/usr/bin/env python
# Author: William Walters
# sort_denovo_primers.py

from __future__ import division

from future.utils import raise_
__author__ = "William Walters"
__copyright__ = "Copyright 2010, The Primer Prospector Project"
__credits__ =  ["William Walters"]
__license__ = "GPL"
__version__ = "1.0.1-release"
__maintainer__ = "William Walters"
__email__ = "william.a.walters@colorado.edu"
__status__ = "Release"

"""
File created 22 July 2009.
"""


from cogent.util.misc import parse_command_line_parameters, create_dir
from optparse import make_option

from primerprospector.sort_denovo_primers import analyze_primers


script_info={}
script_info['brief_description']=""" Analyze, sort, and format de novo primers from generate_primers_denovo.py output"""
script_info['script_description']="""
The purpose of this module is to analyze conserved sequence hits file
from generate_primers_denovo.py to determine if the upstream or downstream
sequences from the conserved 3' primer end are 
reasonably conserved and suitable for use in designing primers.

This module uses the sequences given in the hits file to calculate
the shannon entropies for each position in the primers.  The output
from this module will contain the overall consensus sequence for each
potential primer (going upstream or downstream), a degenerate 
IUPAC sequence that considers all bases found in each position, a 
filtered degenerate IUPAC sequence that does not consider bases whose
percentage is under a specified value, and the shannon entropy scores for
the overall sequences.

Note-the non-filtered IUPAC sequence output will contain a "." for positions
that contain a "-" character (this results from filling in gap characters at
unknown bases that exceed the beginning or end of a sequence in the 
generate_primers_denovo.py module).

Following this initial analysis, the primers are then sorted into a summary
file containing information about each prospective primer and a primer file 
that is formatted for use with the analyze_primers.py module.  
The primers can be sorted according to sensitivity (greatest to least),
specificity (most to least), or shannon entropy of the overall primer.

Finally, a list of known primers can be passed via the -k option to 
compare to the *de novo* primers generated by generate_primers_denovo.py.
The *de novo* primers are compared to the primers passed, and flags any
primers that overlap (considering matching degenerate characters as well).
The 'primers_overlap.txt' file contains information about the 
overlapping primers for the entire primer set.  This file contains a section
showing primers that have a 'match' to the supplied primers, meaning that the
primers overlap and match at the 3' end.  An 'overlap' section shows details 
about primers that overlap with the given primers but do not match at the 
3' end.  Finally, a 'unique' primers section shows details about primers that
do not overlap with the supplied primer set.

These formatted primer files are in the following format:
primer_id <tab> primer sequence (5'->3')
Any comments are preceeded by the pound (#) symbol. 
If known primers are passed with the -k parameter, they need to be in this
format as well.

If a standard alignment was used to record indices in the 
generate_primers_denovo.py module (-a option), this module will detect the 
presence of the standard aligned indices.  If absent, the primers' numeric 
names will be based on the initial unaligned index of the sequence they 
were found in.

"""
script_info['script_usage']=[]
script_info['script_usage'].append(("""Standard Example usage:""","""""","""%prog [options] {-i input_primer_hits_filepath [required] -o output_directory [required]}"""))
script_info['script_usage'].append(("""Sort prospective primers with default settings:""","""""","""sort_denovo_primers.py -i conserved_site_hits.txt -o denovo_primers/"""))
script_info['script_usage'].append(("""Sort the same primers, increase degeneracy allowed (include nucleotides that occur as little as 10% of the time), test primers against primers from the literature (known_primers.txt), and sort according to specificity:""","""""","""sort_denovo_primers.py -i conserved_sites_hits.txt -o denovo_primers/ -p 0.10 -k known_primers.txt -S P\n\n"""))

script_info['output_description']="""The output files are a formatted_primers.txt file containing primers in a format compatible with analyze_primers.py, a primers_details.txt file giving information about sensitivity, specificity, and shannon entropy for each primer, and a primers_overlap.txt file showing information about overlap with known primers if the -k parameter is used."""

script_info['required_options']=[\
    make_option('-i', '--hits_file',  
                help='Conserved Xmers file, output file from '+\
                'generate_primers_denovo.py module.'),
    ]
                
script_info['optional_options']=[\
    make_option('-o', '--output_dir', dest='output_dir',
        help='Output directory', default = "." ),
    
    # Threshold for degeneracy, lower values will result in more degenerate 
    # primers
    make_option('-p', '--variable_pos_freq', 
        help='Percentage at which a '+\
        'variable base is considered for degenerate primer design. '+\
        '[default: %default]', default=0.20),
        
    # Comparison of known primers to de novo primers
    make_option('-k', '--known_primers_filepath', 
        help='Optional primers filepath to '+\
        'compare with the de novo primers.  Comparisons will be used to '+\
        'separate the de novo primers into unique, partially overlapping, or '+\
        'overlapping primers with the known primers supplied. '+\
        '[default: %default]', default=None),
        
    # Sort order of primers output
    make_option('-S', '--sort_method',
        help='Sorting method for reverse and forward '+\
        'primers output files, pass either S, O, or P for [S]ensitivity, '+\
        '[O]verall shannon entropy, s[P]ecificity.'+\
        '[default: %default]', default='S'),
        
    make_option('-P','--primer_name',\
        help='Root name for primers in the '+\
        'formatted_primers.txt output file. [default: %default]', default=""),

    make_option('-m','--match_len',\
        help='Number of base pairs in overlapping sequences '+\
        'to be considered as a significant overlap. [default: %default]',\
        default=10),
        
    make_option('-T','--truncate_len',\
        help="Number of bases to truncate for the 3' "+\
        "end of the primer comparison to the universal primer set. "+\
        "[default: %default]", default=10),
        
    make_option('-a','--amplicon_len',\
        help="Generate primer pair output file that will yield amplicons "+\
        "with an estimated size within the given range.  Requires that the "+\
        "standard alignment option (-a) was used with "+\
        "generate_primers_denovo.py.  Pass the min and max amplicon size "+\
        "separated by a colon, for example -a 250:500 [default: %default]", 
        default=False)]

    
script_info['version'] = __version__


def main():
    option_parser, opts, args = parse_command_line_parameters(**script_info)

    hits_file = opts.hits_file
    output_dir = opts.output_dir
    variable_pos_freq = float(opts.variable_pos_freq)
    known_primers_filepath = opts.known_primers_filepath
    sort_method = opts.sort_method
    primer_name = opts.primer_name
    match_len = int(opts.match_len)
    cmp_truncate_len = int(opts.truncate_len)
    verbose = opts.verbose
    amplicon_len = opts.amplicon_len

    # Test files before analysis
    try:
        test_file=open(hits_file,'r')
        test_file.close()
    except IOError:
        raise_(IOError,('Unable to open specificity file.'))

    # Create output directory if it does not exist
    create_dir(output_dir)
    
    if known_primers_filepath:
        try:
            test_file = open(known_primers_filepath, "r")
            test_file.close()
        except IOError:
            raise IOError('Unable to open known primers file: %s' %\
             known_primers_filepath)
            
        

    if (variable_pos_freq<0.01) or (variable_pos_freq>0.50):
        raise ValueError('variable base percentage parameter '+\
        'expected to be in range of 0.01 to 0.50')
    if sort_method not in ['S','O','P']:
        raise_(ValueError,('sort_method must be "S","O", or "P"'))
    # Check values of amplicon len for logical values
    if amplicon_len:
        try:
            amplicon_len_min, amplicon_len_max = \
             int(amplicon_len.split(":")[0]), int(amplicon_len.split(":")[1])
        except ValueError:
            raise ValueError("Invalid amplicon_len (-a) parameter.  "+\
             "Required form is -a X:Y, where X and Y are min and max int "+\
             "values.  For example, -a 200:500")
        except IndexError:
            raise IndexError("Invalid amplicon_len (-a) parameter.  "+\
             "Required form is -a X:Y, where X and Y are min and max int "+\
             "values.  For example, -a 200:500")
        

    analyze_primers(hits_file, output_dir, verbose,\
     variable_pos_freq, sort_method, known_primers_filepath,\
     primer_name,match_len, cmp_truncate_len, amplicon_len)
    
if __name__ == "__main__":
    main()
